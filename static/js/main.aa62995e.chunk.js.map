{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","components/Header.js","App.js","actions.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","props","imageStyle","styles","id","name","email","react_default","a","createElement","className","style","alt","src","concat","width","height","CardList","_ref","cardComponent","robots","map","robot","Card_Card","Object","assign","key","Scroll","overflowY","children","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","ErrorBoundry","_Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","inherits","createClass","value","error","info","setState","Component","Header","_React$Component","apply","arguments","nextProps","nextState","React","App","onRequestRobots","_this$props","isPanding","filterdRobot","filter","toLowerCase","includes","Spinner","animation","variant","CardList_CardList","_this$props2","onSearchChange","Header_Header","SearchBox_SearchBox","bind","Scroll_Scroll","ErrorBoundry_ErrorBoundry","renderList","connect","searchRobots","_state$requestRobots","requestRobots","dispatch","event","payload","target","fetch","then","respons","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","INITIAL_STATE_SEARCH","INITIAL_STATE_ROBOTS","logger","createLogger","store","createStore","combineReducers","length","undefined","action","objectSpread","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa62995e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Card = (props) =>{\r\n    const {imageStyle} = styles;\r\n    const {id,name,email} = props;\r\n    return(\r\n        <div className=\"bg-light-red dib br3 pa3 ma2 grow shadow-1-ns\">\r\n            <img style={imageStyle} alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst styles={\r\n    imageStyle:{\r\n        width:'150px',\r\n        height:'150px'\r\n    }\r\n}","import React from 'react';\r\nimport {Card} from './Card';\r\n\r\nexport const CardList = ({robots},props) => {\r\n    const cardComponent = robots.map(robot => {\r\n        return <Card key={robot.id} {...robot}/>\r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll', height: '75vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport const SearchBox = ({searchField,searchChange}) => {\r\n    return(\r\n        <input\r\n            aria-label=\"Search Robots\"\r\n            className=\"pa2 ba b--red bg-light-yellow\" \r\n            type=\"search\" \r\n            placeholder=\"Search Robots\"\r\n            onChange={searchChange}/>\r\n    )\r\n}\r\n\r\n","import React,{Component} from 'react';\r\n\r\n\r\nexport class ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        const {hasError} = this.state;\r\n        const {children} = this.props;\r\n\r\n        if(hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return children;\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport class Header extends React.Component{\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        return <h1 className=\"title\">Robo Friends</h1>;\r\n    }\r\n}\r\n ","import React from 'react';\nimport { CardList, SearchBox, Scroll, ErrorBoundry, Header } from './components';\nimport {connect} from 'react-redux';\nimport { Spinner } from 'react-bootstrap'\nimport { setSearchText,requestRobots } from './actions';\n\n\nclass App extends React.Component{\n\n  componentDidMount(){\n    this.props.onRequestRobots();\n  }\n\n  renderList(){\n    const {robots,isPanding} = this.props;\n    const filterdRobot = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase())\n    })\n\n    if(isPanding){\n      return <Spinner \n        animation=\"border\" \n        variant=\"primary\" />\n    }\n    else{\n      return <CardList robots={filterdRobot}/>\n    }\n  }\n\n  render(){\n    const {onSearchChange, searchField} = this.props;\n    return(\n      <div className=\"tc\">\n        <Header/>\n        <SearchBox \n          searchChange={onSearchChange.bind(this)}\n          searchField={searchField}/>\n        <hr/>\n        <Scroll>\n          <ErrorBoundry>\n            {this.renderList()}\n          </ErrorBoundry>\n        </Scroll>\n        </div>\n\n      )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  const {searchField} = state.searchRobots;\n  const {robots,isPanding,error} = state.requestRobots;\n  return{\n    searchField,\n    robots,\n    isPanding,\n    error\n  }\n}\n\nconst mapDispatchToProp = (dispatch) => {\n  return{\n    onSearchChange: (event) => dispatch(setSearchText(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProp)(App);\n","import {\r\n    CHANGE_SEARCH_TEXT,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING\r\n} from './constants';\r\n\r\nexport const setSearchText = (text) => ({\r\n    type: CHANGE_SEARCH_TEXT,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () =>  (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(respons=> respons.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_TEXT = 'CHANGE_SEARCH_TEXT';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_TEXT,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING\r\n} from './constants';\r\n\r\nconst INITIAL_STATE_SEARCH = {\r\n    searchField:''\r\n}\r\n\r\nconst INITIAL_STATE_ROBOTS = {\r\n    isPanding: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state=INITIAL_STATE_SEARCH,action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_TEXT:\r\n            return{\r\n                ...state,\r\n                searchField: action.payload\r\n            }\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }   \r\n}\r\n\r\n\r\nexport const requestRobots = (state=INITIAL_STATE_ROBOTS, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return{\r\n                ...state,\r\n                isPanding: true\r\n            }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return{\r\n                ...state,\r\n                robots: action.payload,\r\n                isPanding: false\r\n            }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isPanding: false\r\n            }\r\n        default:\r\n            return {...state}\r\n        \r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchRobots,requestRobots} from './reducer';\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport { createStore,applyMiddleware,combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst store = createStore(combineReducers({\n    searchRobots,\n    requestRobots\n}),applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}